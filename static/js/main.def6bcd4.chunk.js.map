{"version":3,"sources":["components/CharacterCard/CharacterCard.js","components/Title/Title.js","components/Score/Score.js","components/Wins/Wins.js","components/Jumbotron/Jumbotron.js","components/Wrapper/Wrapper.js","components/Container/Container.js","App.js","serviceWorker.js","index.js"],"names":["CharacterCard","props","react_default","a","createElement","className","onClick","handleClick","id","class","alt","name","src","image","Title","title","Score","score","Wins","wins","Jumbotron","children","Wrapper","Container","App","state","characters","clickedCharacterList","handleIncrement","_this","setState","resetCount","shuffleArray","clickCharacter","includes","push","checkWin","alert","_this2","this","components_Container_Container","components_Jumbotron_Jumbotron","components_Title_Title","components_Score_Score","components_Wins_Wins","components_Wrapper_Wrapper","map","character","components_CharacterCard_CharacterCard","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.def6bcd4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./CharacterCard.css\";\r\n\r\nconst CharacterCard = props => (\r\n    <div className=\"card border-secondary col-sm-2 px-0 mx-1 my-1\" onClick={() => props.handleClick(props.id)}>\r\n        <div className=\"img-container\">\r\n            <img class=\"img-fluid my-auto mx-0\" alt={props.name} src={props.image} />\r\n        </div>\r\n    </div>\r\n);\r\n\r\nexport default CharacterCard;","import React from \"react\";\r\nimport \"./Title.css\";\r\n\r\nconst Title = props => (\r\n    <div className=\"col-8\">\r\n        <h1 className=\"title\">Click Game: GoT Edition</h1>\r\n        <blockquote class=\"blockquote\">\r\n            <h3 class=\"mb-0\">\"When you play the game of thrones, you click or you die\"</h3>\r\n            <footer class=\"blockquote-footer\">Cersei Lannister, <cite title=\"Source Title\">A Game of Thrones</cite></footer>\r\n        </blockquote>\r\n    </div>\r\n);\r\n\r\nexport default Title;","import React from 'react';\r\nimport './Score.css';\r\n\r\nconst Score = props => (\r\n    <div className=\"row\">\r\n        <h2 className=\"mx-auto\">Score: {props.score}</h2>\r\n    </div>\r\n);\r\n\r\nexport default Score;","import React from 'react';\r\nimport './Wins.css';\r\n\r\nconst Wins = props => (\r\n    <div className=\"row\">\r\n        <h2 className=\"mx-auto\">Wins: {props.wins}</h2>\r\n    </div>\r\n)\r\n\r\nexport default Wins;","import React from 'react';\r\nimport './Jumbotron.css';\r\n\r\nconst Jumbotron = props => (\r\n    <div className=\"jumbotron text-center\">{props.children}</div>\r\n)\r\n\r\nexport default Jumbotron;","import React from \"react\";\r\nimport \"./Wrapper.css\";\r\n\r\nconst Wrapper = props => <div className=\"wrapper row\">{props.children}</div>;\r\n\r\nexport default Wrapper;","import React from 'react';\r\nimport './Container.css';\r\n\r\nconst Container = props => (\r\n    <div className=\"container\">{props.children}</div>\r\n);\r\n\r\nexport default Container;","import React, { Component } from 'react';\nimport CharacterCard from './components/CharacterCard';\nimport Title from './components/Title';\nimport Score from './components/Score';\nimport Wins from './components/Wins';\nimport Jumbotron from './components/Jumbotron';\nimport Wrapper from './components/Wrapper';\nimport Container from './components/Container';\nimport characters from './characters.json';\nimport shuffleArray from 'shuffle-array';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    characters,\n    score: 0,\n    clickedCharacterList: [],\n    wins: 0\n  }\n\n  handleIncrement = () => {\n    this.setState({ score: this.state.score + 1});\n  }\n\n  resetCount = () => {\n    this.setState({ \n      score: 0, \n      clickedCharacterList: [] \n    });\n    shuffleArray(this.state.characters);\n  }\n\n  clickCharacter = id => {\n    if (this.state.clickedCharacterList.includes(id)) {\n      this.resetCount();\n    } else {\n      this.handleIncrement();\n      this.state.clickedCharacterList.push(id);\n      shuffleArray(this.state.characters);\n    }\n    this.checkWin();\n  };\n\n  handleClick = id => {\n    this.clickCharacter(id, () => {\n      this.checkWin();\n    });\n  }\n\n  checkWin = () => {\n    if (this.state.score > 11) {\n      this.setState({ wins: this.state.wins + 1});\n      this.resetCount();\n      alert(\"You've chosen all characters! Let's start a new round...\")\n    }\n  };\n\n  render() {\n    return (\n      <Container>\n        <Jumbotron>\n          <div className=\"row\">\n            <Title />\n            <div className=\"col-4 my-auto\">\n              <Score score = {this.state.score}  />\n              <Wins wins = {this.state.wins} />\n            </div>\n          </div>\n        </Jumbotron>\n        <Wrapper>\n          {this.state.clickedCharacterList}\n          {this.state.characters.map(character => (\n            <CharacterCard \n              id = {character.id}\n              name = {character.name}\n              image = {character.image}\n              handleClick = {this.handleClick}\n            />\n          ))}\n        </Wrapper>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}